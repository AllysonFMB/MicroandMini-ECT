/*
  Web client

  This sketch connects to a website (http://www.google.com)
  using an Arduino Wiznet Ethernet shield.

  Circuit:
   Ethernet shield attached to pins 10, 11, 12, 13

  created 18 Dec 2009
  by David A. Mellis
  modified 9 Apr 2012
  by Tom Igoe, based on work by Adrian McEwen

*/

#include <SPI.h>
#include <Ethernet.h>
int estado = 0;
// Enter a MAC address for your controller below.
// Newer Ethernet shields have a MAC address printed on a sticker on the shield
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xAF, 0xFE, 0xED };
// if you don't want to use DNS (and reduce your sketch size)
// use the numeric IP instead of the name for the server:
//IPAddress server(74,125,232,128);  // numeric IP for Google (no DNS)
char server[] = "10.6.9.63";    // name address for Google (using DNS)

// Set the static IP address to use if the DHCP fails to assign
IPAddress ip(192, 168, 0, 177);

// Initialize the Ethernet client library
// with the IP address and port of the server
// that you want to connect to (port 80 is default for HTTP):
EthernetClient client;

void setup() {
  // Open serial communications and wait for port to open:
  pinMode(2,OUTPUT);
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // start the Ethernet connection:
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    // try to congifure using IP address instead of DHCP:
    Ethernet.begin(mac);
  }
  // give the Ethernet shield a second to initialize:
  delay(1000);
  Serial.println("connecting...");

  // if you get a connection, report back via serial:
  if (client.connect(server, 80)) {
    Serial.println("connected");
    // Make a HTTP request:
    client.println("GET /search?q=arduino HTTP/1.1");
    client.println("Host: www.google.com");
    client.println("Connection: close");
    client.println();
  } else {
    // if you didn't get a connection to the server:
    Serial.println("connection failed");
  }
}

void loop() {

  estado = !estado;
  // if there are incoming bytes available
  // from the server, read them and print them:
  int len = client.available();
  //Serial.println(len);
  if (len > 0) {
    Serial.print("recebendo ");
    Serial.println(len);
    byte buffer[80];
    if (len > 80) len = 80;
    client.read(buffer, len);
    String s = String((char *)buffer);
    int v = s.toInt();
    Serial.print("valor recibido: ");
    Serial.println(v);
   analogWrite(2, v);
   delay(20);
  }
  
  // if the server's disconnected, stop the client:
  if (!client.connected()) {
    Serial.println("disconected");
    delay(5000);
    Serial.print("connecting to ");
    Serial.print(server);
    Serial.println("...");
   
    // if you get a connection, report back via serial:
    if (client.connect(server, 80)) {
      Serial.print("connected to ");

      // Make a HTTP request:
      if(estado = 0){
      client.println("GET /?var=potenciometro ");
      }
      else{
        client.println("GET /?var=botao ");

        }
      client.println("Host: 10.6.9.63");
      client.println("Connection: close");
      client.println();
    } else {
      // if you didn't get a connection to the server:
      Serial.println("connection failed");
    }
  }


delay(20);
  }

